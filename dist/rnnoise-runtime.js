'use strict';(function(){const e=document.currentScript.src.match(/(.*\/)?/)[0],f=(WebAssembly.compileStreaming||(async a=>await WebAssembly.compile(await (await a).arrayBuffer())))(fetch(e+"rnnoise-processor.wasm"));let c;if(window.AudioWorkletNode||(window.AudioWorkletNode=window.webkitAudioWorkletNode))c=class extends AudioWorkletNode{static async register(a){a.RNNoiseModule||(a.RNNoiseModule=await f,await a.audioWorklet.addModule(e+"rnnoise-processor.js"))}constructor(a){super(a,"rnnoise",{channelCountMode:"explicit",
channelCount:1,channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[1],processorOptions:{module:a.RNNoiseModule}});this.port.onmessage=({data:a})=>{a=Object.assign(new Event("status"),a);this.dispatchEvent(a);if(this.onstatus)this.onstatus(a)}}update(){this.port.postMessage({})}};else if(window.ScriptProcessorNode||(window.ScriptProcessorNode=window.webkitScriptProcessorNode))c=function(a){const b=a.createScriptProcessor(512,1,1),d=a.RNNoiseInstance,c=new Float32Array(d.memory.buffer);
let e=d.buffer(0);d.reset();b.onaudioprocess=({inputBuffer:a,outputBuffer:b})=>{a=a.getChannelData(0);b=b.getChannelData(0);c.set(a,e/4);e=d.buffer(a.length);(a=d.render(b.length)/4)&&b.set(c.subarray(a,a+b.length))};b.update=()=>{const a=Object.assign(new Event("status"),{vadProb:d.getVadProb()});b.dispatchEvent(a);if(b.onstatus)b.onstatus(a)};return b},c.register=async a=>{a.RNNoiseInstance||(a.RNNoiseInstance=(await WebAssembly.instantiate(await f)).exports)};window.RNNoiseNode=c})();
