'use strict';{const n=WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,9,1,7,0,65,0,253,15,26,11]))?"rnnoise-processor-simd.wasm":"rnnoise-processor.wasm",k=document.currentScript.src.match(/(.*\/)?/)[0],l=(WebAssembly.compileStreaming||(async a=>await WebAssembly.compile(await (await a).arrayBuffer())))(fetch(k+n));let m,b,g;window.RNNoiseNode=(window.AudioWorkletNode||(window.AudioWorkletNode=window.webkitAudioWorkletNode))&&class extends AudioWorkletNode{static async register(a){m=
await l;await a.audioWorklet.addModule(k+"rnnoise-processor.js")}constructor(a,e){super(a,"rnnoise",{channelCountMode:"explicit",channelCount:1,channelInterpretation:"speakers",numberOfInputs:1,numberOfOutputs:1,outputChannelCount:[1],processorOptions:{module:m,...e}});this.port.onmessage=({data:a})=>{if(this.onstatus)this.onstatus(a)}}update(a){this.port.postMessage(a)}}||(window.ScriptProcessorNode||(window.ScriptProcessorNode=window.webkitScriptProcessorNode))&&Object.assign(function(a,e){const p=
b["newState"+(e.model||"")]||b.newState,f=a.createScriptProcessor(e.bufferSize||4096,1,1);let c=p();b.setSampleRate(c,e.sampleRate||48E3);let h=!0;f.onaudioprocess=({inputBuffer:a,outputBuffer:d})=>{a=a.getChannelData(0);d=d.getChannelData(0);if(c&&h&&a&&d&&a.length&&d.length&&(g.set(a,b.getInput(c)/4),(a=b.pipe(c,d.length)/4)&&d&&d.set(g.subarray(a,a+d.length)),f.onstatus))f.onstatus({vadProb:b.getVadProb(c)})};f.update=a=>{h&&!a&&c&&(h=!1,b.deleteState(c),c=null)};return f},{register:async()=>{b||
(g=new Float32Array((b=(await WebAssembly.instantiate(await l)).exports).memory.buffer))}})};
